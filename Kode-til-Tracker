import numpy as np
from matplotlib import pyplot as plt

### Funktioner ###

def convertdata(data):

    irow = 0

    for row in data:

        icol = 0

        for i in row:
            i = i.replace('E', '*10**')
            i = i.replace(',', '.')
            i = eval(i)

            data[irow][icol] = i

            icol += 1

        irow += 1

    data = data.astype(float)

    return(data)

def intervals(data):

    intervals = []

    for i in range(len(data)):
        if i == len(data) - 1:
            break
        else: 
            x = data[i+1] - data[i]
            intervals.append(x)

    intervals = np.array(intervals)

    return intervals

def avg_interv(data):

    avg_interv = []

    for i in range(len(data)):
        if i == len(data) - 1:
            break 
        else: 
            x = (data[i+1] + data[i]) / 2
            avg_interv.append(x)

    avg_interv = np.array(avg_interv)

    return avg_interv

##############################################################################

### Læs data ###

data = np.loadtxt('Tracker data 2.txt', dtype=str, skiprows=2)

data = convertdata(data)

### Plot position per tid ###

t = data[:,0]
pos = data[:,1]

fit_pos = np.polyfit(t, pos, 2)

x = np.linspace(0,t[-1],100)
y = fit_pos[0]*x**2 + fit_pos[1]*x + fit_pos[2]

label1 = f"y = {round(fit_pos[0],2)}$x^2$ + {round(fit_pos[1],2)}x + {round(fit_pos[2],2)}"

plt.plot(x, y, color = 'r', label = label1)
plt.plot(t, pos, 'o', color = 'b')

plt.xlabel('Tid [s]')
plt.ylabel('Position [m]')
plt.title('Position per tid')

plt.legend()
plt.show()

### Plot hastighed per tid ###

int_t = intervals(t)
int_pos = intervals(pos)

v = int_pos/int_t
tv = avg_interv(t)

x = np.linspace(0,tv[-1],100)
y = 2*fit_pos[0]*x + fit_pos[1]

label2 = f"y = {round(2*fit_pos[0],2)}x + {round(fit_pos[1],2)}"

plt.plot(x, y, color = 'r', label = label2)
plt.plot(tv, v, 'o', color = 'b')

plt.xlabel('Tid [s]')
plt.ylabel('Hastighed [m/s]')
plt.title('Hastighed per tid')

plt.legend()
plt.show()

### Plot acceleration per tid ###

int_tv = intervals(tv)
int_v = intervals(v)

a = int_v/int_tv
ta = avg_interv(tv)

x = np.linspace(0,ta[-1],100)
y = np.repeat(2*fit_pos[0],100)

label3 = f"y = {round(2*fit_pos[0],2)}"

plt.plot(x, y, color='r', label = label3)
plt.plot(ta, a, 'o')

plt.xlabel('Tid [s]')
plt.ylabel('Acceleration (m/$s^2$)')
plt.title('Acceleration per tid')

plt.legend()
plt.show()

### Diskussion ###

# Hvad sker der med vores datapunkter når vi beregner hastighed og acceleration som funktion af tid?

"""
Vi forøger den naturlige støj associeret med vores målinger.

For to efterfølgende positioner y1 og y2, har vi tilhørende støj E1 og E2.
E1 og E2 repræsenterer altså usikkerheden ved hver måling.

Når vi finder forskellen y2 - y1, finder vi i virkeligheden forskellen y2 + E2 - y1 - E1.

Når vi så beregner v = (y2 - y1)/dt, får vi i virkeligheden v = (y2 - y1)/dt + (E2 - E1)/dt

Vi har altså endnu mere usikkerhed på vores hastigheder; vi har både E2 og E1.

Desuden er dt lille, hvilket yderligere forstørre støjen.

Disse ting medfører at usikkerheden på vores hastigheder bliver større.
"""

#Hvad kunne vi gøre for at få bedre datapunkter for hastighed og acceleration?

"""
I stedet for at beregne hastigheder baseret på 2 punkter, kunne vi beregne vores hastigheder
baseret på flere punkter og over et større tidsinterval.

Usikkerhederne for punkterne har større chance for at udligne hinanden jo flere punkter vi medtager,
og desto større vores tidsinterval desto mindre usikkerhed på vores hastigheder.

At gøre alt det ville dog ikke medføre bedre data end hvad vi ville få ud af at fitte
et 2. grads polynomium til vores originale datasæt; fittet i sig selv er jo kontinuerligt
og kan differentieres uden problemer, i modsætning til vores datapunker der er diskontinuerte.
"""

#Hvad er moralen/lektien ved vores øvelse?

""" 
Når du bearbejder dine data, så vær opmærksom på hvad der sker med dine usikkerheder!
"""

#Ekstra: En mere matematisk beskrivelse

"""
Vi lader positionspunkterne y være fordelt ved y ~ N(mu,sigma^2).

For at beregne en vilkårlig hastighed v ser vi v = (y2 - y1)/dt + N(0,2*sigma^2)/dt

Bid mærke i at varianserne adderes, hvilket forøger støjen.
Bid desuden mærke i at et lille dt medfører endnu større støj.
"""
